// Generated by gencpp from file assignment_1_intro_to_ros/weather_msgs.msg
// DO NOT EDIT!


#ifndef ASSIGNMENT_1_INTRO_TO_ROS_MESSAGE_WEATHER_MSGS_H
#define ASSIGNMENT_1_INTRO_TO_ROS_MESSAGE_WEATHER_MSGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace assignment_1_intro_to_ros
{
template <class ContainerAllocator>
struct weather_msgs_
{
  typedef weather_msgs_<ContainerAllocator> Type;

  weather_msgs_()
    : zip(0)
    , location()
    , temperature(0.0)
    , sky()
    , lastUpdate()  {
    }
  weather_msgs_(const ContainerAllocator& _alloc)
    : zip(0)
    , location(_alloc)
    , temperature(0.0)
    , sky(_alloc)
    , lastUpdate(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _zip_type;
  _zip_type zip;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _location_type;
  _location_type location;

   typedef float _temperature_type;
  _temperature_type temperature;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _sky_type;
  _sky_type sky;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _lastUpdate_type;
  _lastUpdate_type lastUpdate;




  typedef boost::shared_ptr< ::assignment_1_intro_to_ros::weather_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::assignment_1_intro_to_ros::weather_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct weather_msgs_

typedef ::assignment_1_intro_to_ros::weather_msgs_<std::allocator<void> > weather_msgs;

typedef boost::shared_ptr< ::assignment_1_intro_to_ros::weather_msgs > weather_msgsPtr;
typedef boost::shared_ptr< ::assignment_1_intro_to_ros::weather_msgs const> weather_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::assignment_1_intro_to_ros::weather_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::assignment_1_intro_to_ros::weather_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace assignment_1_intro_to_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'assignment_1_intro_to_ros': ['/home/rogergomes/Frosty-The-Snowman/Assignment_1/catkin_ws/src/assignment_1_intro_to_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::assignment_1_intro_to_ros::weather_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment_1_intro_to_ros::weather_msgs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::assignment_1_intro_to_ros::weather_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::assignment_1_intro_to_ros::weather_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment_1_intro_to_ros::weather_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment_1_intro_to_ros::weather_msgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::assignment_1_intro_to_ros::weather_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f2f889670be3466a6e7933e380c57aab";
  }

  static const char* value(const ::assignment_1_intro_to_ros::weather_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf2f889670be3466aULL;
  static const uint64_t static_value2 = 0x6e7933e380c57aabULL;
};

template<class ContainerAllocator>
struct DataType< ::assignment_1_intro_to_ros::weather_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "assignment_1_intro_to_ros/weather_msgs";
  }

  static const char* value(const ::assignment_1_intro_to_ros::weather_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::assignment_1_intro_to_ros::weather_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 zip\n\
string location\n\
float32 temperature\n\
string sky\n\
string lastUpdate\n\
";
  }

  static const char* value(const ::assignment_1_intro_to_ros::weather_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::assignment_1_intro_to_ros::weather_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.zip);
      stream.next(m.location);
      stream.next(m.temperature);
      stream.next(m.sky);
      stream.next(m.lastUpdate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct weather_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::assignment_1_intro_to_ros::weather_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::assignment_1_intro_to_ros::weather_msgs_<ContainerAllocator>& v)
  {
    s << indent << "zip: ";
    Printer<int64_t>::stream(s, indent + "  ", v.zip);
    s << indent << "location: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.location);
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
    s << indent << "sky: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sky);
    s << indent << "lastUpdate: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.lastUpdate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASSIGNMENT_1_INTRO_TO_ROS_MESSAGE_WEATHER_MSGS_H
